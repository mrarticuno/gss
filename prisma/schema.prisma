// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teams         Team[]    @relation("UserTeams")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Player {
    id            Int                @id @default(autoincrement())
    firstName     String
    lastName      String
    position      String
    team          Team?              @relation(fields: [teamId], references: [id])
    teamId        Int?
    ballControl   Int
    dribbling     Int
    marking       Int
    slideTackle   Int
    standTackle   Int
    aggression    Int
    reactions     Int
    attPosition   Int
    interceptions Int
    vision        Int
    composure     Int
    crossing      Int
    shortPass     Int
    longPass      Int
    acceleration  Int
    stamina       Int
    strength      Int
    balance       Int
    sprintSpeed   Int
    agility       Int
    jumping       Int
    heading       Int
    shotPower     Int
    finishing     Int
    longShots     Int
    curve         Int
    fkAccuracy    Int
    penalties     Int
    volleys       Int
    gkPositioning Int
    gkDiving      Int
    gkHandling    Int
    gkKicking     Int
    gkReflexes    Int
    specialities  PlayerSpeciality[]
    traits        PlayerTrait[]
}

model Team {
    id          Int      @id @default(autoincrement())
    name        String
    owner       User?    @relation("UserTeams", fields: [ownerId], references: [id])
    ownerId     String?
    players     Player[]
    matchesHome Match[]  @relation("HomeTeam")
    matchesAway Match[]  @relation("AwayTeam")
}

model Match {
    id         Int      @id @default(autoincrement())
    date       DateTime
    homeTeam   Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
    homeTeamId Int
    awayTeam   Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
    awayTeamId Int
    homeScore  Int
    awayScore  Int
}

model Speciality {
    id      Int                @id @default(autoincrement())
    name    String
    players PlayerSpeciality[]
}

model Trait {
    id      Int           @id @default(autoincrement())
    name    String
    players PlayerTrait[]
}

model PlayerSpeciality {
    playerId     Int
    specialityId Int
    player       Player     @relation(fields: [playerId], references: [id])
    speciality   Speciality @relation(fields: [specialityId], references: [id])

    @@id([playerId, specialityId])
}

model PlayerTrait {
    playerId Int
    traitId  Int
    player   Player @relation(fields: [playerId], references: [id])
    trait    Trait  @relation(fields: [traitId], references: [id])

    @@id([playerId, traitId])
}
